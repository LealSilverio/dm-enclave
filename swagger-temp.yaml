swagger: "2.0"
info:
  title: DM Enclave
  description: Do the D&D stuff
  version: 0.0.1
host: dm-enclave.onrender.com
tags:
  - name: character
    description: >-
      Character sheets. Can be of type player or NPC Belongs to a player or a
      campaign(if sheet is for NPC)
  - name: campaign
    description: Campaigns own players or characters(for NPCs) and belong to DMs.
  - name: encounter
    description: >-
      Encounters belong to campaigns. NPC characters or players belong to
      encounters.
  - name: user
    description: >-
      Can be of type player or DM, players own sheets and belong to campaigns,
      DMs own campaigns.
schemes:
  - https
  - http
paths:
  /character/{characterId}:
    get:
      tags:
        - character
      summary: ✅Get a character record by id.
      produces:
        - application/json
      parameters:
        - name: characterId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: Character record identified by id
          schema:
            $ref: "#/definitions/Character"
        "400":
          description: bad request
    put:
      tags:
        - character
      summary: ✅Update a character record by id.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: characterId
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: new character data
          required: true
          schema:
            $ref: "#/definitions/Character"
          description: >-
            if you don't want a certain attribute changed, don't include it in
            the body
      responses:
        "200":
          description: The modified character record
          schema:
            $ref: "#/definitions/Character"
        "400":
          description: bad request
    delete:
      tags:
        - character
      summary: ✅Delete a character record by id.
      produces:
        - application/json
      parameters:
        - name: characterId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: The record that was deleted
          schema:
            $ref: "#/definitions/Character"
        "400":
          description: bad request
  /character/all:
    get:
      tags:
        - character
      summary: ✅get a list of all characters
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        "200":
          description: List of all character records
          schema:
            type: array
            items:
              $ref: "#/definitions/Character"
        "400":
          description: bad request
  /character:
    post:
      tags:
        - character
      summary: ✅Create a new character record.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Character"
      responses:
        "200":
          description: The created character record
          schema:
            $ref: "#/definitions/Character"
        "400":
          description: bad request
  /character/search:
    get:
      tags:
        - character
      summary: ✅Search for a character by any attribute
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: id
          required: false
          type: string
        - name: name
          in: query
          required: false
          type: string
        - name: level
          required: false
          type: integer
        - name: charClass
          required: false
          type: string
        - name: race
          required: false
          type: string
        - name: type
          required: false
          type: string
        - name: ownerId
          required: false
          type: string
      responses:
        "200":
          description: List of matching character records
          schema:
            type: array
            items:
              $ref: "#/definitions/Character"
        "400":
          description: bad request
  /campaign/{campaignId}:
    get:
      tags:
        - campaign
      summary: "[not-implemented]Get a campaign record by id."
      produces:
        - application/json
      parameters:
        - name: campaignId
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Campaign record identified by id
          schema:
            $ref: "#/definitions/Campaign"
        "400":
          description: bad request
    put:
      tags:
        - campaign
      summary: "[not-implemented]Update a campaign record by id."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: campaignId
          in: path
          required: true
          type: string
        - in: body
          name: modifiedCampaignData
          description: Include only fields that you want changed.
          required: true
          schema:
            $ref: "#/definitions/Campaign"
      responses:
        "200":
          description: The modified campaign record
          schema:
            $ref: "#/definitions/Campaign"
        "400":
          description: bad request
    delete:
      tags:
        - campaign
      summary: "[not-implemented]Delete a campaign record by id."
      produces:
        - application/json
      parameters:
        - name: campaignId
          in: path
          required: true
          type: string
      responses:
        "200":
          description: The record that was deleted
          schema:
            $ref: "#/definitions/Campaign"
        "400":
          description: bad request
  /campaign/:
    post:
      tags:
        - campaign
      summary: "[not-implemented]Create a campaign record."
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Campaign"
      responses:
        "200":
          description: The record that was created
          schema:
            $ref: "#/definitions/Campaign"
        "400":
          description: bad request
  /campaign/search:
    get:
      tags:
        - campaign
      summary: "[not-implemented]Search for a campaign by any attribute"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: id
          required: false
          type: string
        - name: name
          in: query
          required: false
          type: string
        - name: ownerId
          required: false
          type: string
      responses:
        "200":
          description: List of matching Campaign records
          schema:
            type: array
            items:
              $ref: "#/definitions/Campaign"
        "400":
          description: bad request
  /encounter/{encounterId}:
    get:
      tags:
        - encounter
      summary: "[not-implemented]Get an Encounter record by encounterId."
      produces:
        - application/json
      parameters:
        - name: encounterId
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Encounter record identified by encounterId
          schema:
            $ref: "#/definitions/Encounter"
        "400":
          description: bad request
    put:
      tags:
        - encounter
      summary: "[not-implemented]Update an encounter record by id."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: encounterId
          in: path
          required: true
          type: string
        - in: body
          name: modifiedEncounterData
          description: >-
            if you don't want a certain attribute changed, don't include it in
            the body
          required: true
          schema:
            $ref: "#/definitions/Encounter"
      responses:
        "200":
          description: The modified encounter record
          schema:
            $ref: "#/definitions/Encounter"
        "400":
          description: bad request
    delete:
      tags:
        - encounter
      summary: "[not-implemented]Delete an encounter record by id."
      produces:
        - application/json
      parameters:
        - name: encounterId
          in: path
          required: true
          type: string
      responses:
        "200":
          description: The record that was deleted
          schema:
            $ref: "#/definitions/Encounter"
        "400":
          description: bad request
  /encouter/all:
    get:
      tags:
        - encounter
      summary: "[not-implemented]get a list of all encounters"
      consumes:
        - application/json
      responses:
        "200":
          description: List of all encounters
          schema:
            type: array
            items:
              $ref: "#/definitions/Encounter"
        "400":
          description: bad request
  /encounter/:
    post:
      tags:
        - encounter
      summary: "[not-implemented]Create an Encounter record."
      produces:
        - application/json
      parameters:
        - in: body
          name: newEncounter
          required: true
          schema:
            $ref: "#/definitions/Encounter"
      responses:
        "200":
          description: The record that was created
          schema:
            $ref: "#/definitions/Encounter"
        "400":
          description: bad request
  /encounter/search:
    get:
      tags:
        - encounter
      summary: "[not-implemented]Search for an Encounter by name or id"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: name
          in: query
          required: false
          type: string
        - name: id
          in: query
          required: false
          type: string
      responses:
        "200":
          description: List of matching Encounter records
          schema:
            type: array
            items:
              $ref: "#/definitions/Encounter"
        "400":
          description: bad request
  /user/{userId}:
    get:
      tags:
        - user
      summary: ✅get a user by id
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      responses:
        "200":
          description: User identified by UserId
          schema:
            $ref: "#/definitions/User"
        "400":
          description: bad request
    put:
      tags:
        - user
      summary: "[not-impemented]update a user by id"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: modifiedUserData
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
          description: >-
            if you don't want a certain attribute changed, don't include it in
            the body
      responses:
        "200":
          description: the modified user record
          schema:
            $ref: "#/definitions/User"
        "400":
          description: bad request
    delete:
      tags:
        - user
      summary: "[not-implemented]delete a user. note: you can/'t leave orphans"
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      responses:
        "200":
          description: the deleted user record
          schema:
            $ref: "#/definitions/User"
        "400":
          description: bad response
  /user/all:
    get:
      tags:
        - user
      summary: "[not-implemented]get all users"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: name
          in: query
          required: false
          type: string
        - name: id
          in: query
          required: false
          type: string
      responses:
        "200":
          description: List of all user records
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        "400":
          description: bad request
  /user/login:
    post:
      tags:
        - user
      summary: ✅submit login credentials to get an auth token
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        "200":
          description: an object containing the auth token
          schema:
            type: object
            properties:
              access_token:
                type: string
        "400":
          description: bad response
  /user/register:
    post:
      tags:
        - user
      summary: >-
        ✅Create a new character record and register it with id provider and
        database
      parameters:
        - name: newUserData
          in: body
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
              email:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              type:
                type: string
                enum:
                  - player
                  - dm
              profilePicUrl:
                type: string
          description: >-
            all fields are required, type must be either 'player' or 'dm'.
            password is stored only by auth0.
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        "200":
          description: the created user record
          schema:
            $ref: "#/definitions/User"
        "400":
          description: bad request
  /user/logout:
    get:
      tags:
        - user
      summary: "[not-implemented]submit a token to be invalidated"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: authorization
          description: "Bearer token"
          in: header
          required: true
          type: string
      responses:
        "200":
          description: token invalidated
        "400":
          description: bad request
definitions:
  Character:
    type: object
    properties:
      name:
        type: string
      level:
        type: integer
      CharClass:
        type: string
      race:
        type: string
      type:
        type: string
        enum:
          - player
          - npc
      ownerId:
        type: string
  Campaign:
    type: object
    properties:
      name:
        type: string
      ownerId:
        type: string
  Encounter:
    type: object
    properties:
      name:
        type: string
  User:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      pictureUrl:
        type: string
      auth0Id:
        type: string
      type:
        type: string
        enum:
          - player
          - dm
      email:
        type: string
